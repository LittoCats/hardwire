crystal_doc_search_index_callback({"repository_name":"hardwire","body":"# HardWire ‚ö°\n[![Crystal CI](https://github.com/jerometwell/hardwire/workflows/Crystal%20CI/badge.svg?branch=master)](https://github.com/jerometwell/hardwire/actions?query=workflow%3A%22Crystal+CI%22)\n\nA Compile-time Dependency Injection system for Crystal.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  hardwire:\n    github: jerometwell/hardwire\n```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"hardwire\"\n```\n\nHardwire is designed to operate inside a container object.\nSince the resolution is compile-time (Using Macros), normally this will be a module.\n\n### Creating a container üì¶\n```crystal\n# To create a new container, include `HardWire::Container`\n# This will add the macros you need to register and resolve wiring\nmodule Container\n  include HardWire::Container\n\n  # use transient/singleton to wire different lifecycles\n  # singleton dependencies will be memoized\n  # dependencies for the constructor will be resolved from the constructor automatically\n  transient Dependency\n  singleton NeedsDependency\n\n  # you can also register dependencies with a block instead of inspecting the constructor\n  # Your block MUST return an instance of the class you are registering\n  singleton NeedsDependency {\n    NeedsDependency.new( self.resolve Dependency )\n  }\nend\n```\n\nHardwire tries to operate with minimal modifications to other classes (unless required).\n_\"simple\"_ classes, e.g.\n  * Have a single constructor\n  * Have unique dependencies/do not require tags\n\nIf your classes match this signature, you can wire up in the container without adding anything to the classes.\n\nFor everything else, there's:\n\n### Multiple Constructors üöß\nHardwire needs to know which constuctor function to use.\n\nAnnotate your \"Injectable\" constructor with the Hardwire::Inject annotation.\n```crystal\nclass MultipleInits\n  @[HardWire::Inject]\n  def initialize(input: String)\n    # register will inspect this method's arguments\n    # [...]\n  end\n\n  def initialize\n    # will not be used for injection\n    # [...]\n  end\nend\n```\n\n### Tags üè∑\nTo differentiate between registrations of _the same type_, use the HardWire::Tags annotation.\nTags allow you to attach additional metadata to the signature. Tags themselves are string-based, simple identifiers (/\\w+/) that allow you to resolve\na different registration of the same class.\n\n\n```crystal\n# [...]\n\n# registering a transient dependency with tag \"secret\"\ntransient String, \"secret\" {\n  \"a secret string\"\n}\n\n# registering a singleton\n# When no tags are set, it is considered the \"default\" registration\nsingleton DbService\n\n# registering a different singleton with a tag\nsingleton DbService, \"primary\"\n\n# Resolving Dependencies\nclass Resolving\n  @[Hardwire::Tags(input: \"secret\", primary_db: \"primary\")]\n  def initialize(input : String, primary_db : DbService, default_db : DbService)\n  end\nend\n```\n\n### Resolving Manually üî®\nYou can resolve dependencies manually using the `.resolve` macro. This allows you to resolve dependencies manually with the tag string.\n\n```crystal\nmodule Container\n  include HardWire::Container\n\n  transient SecretService, \"primary\"\n  singleton DatabaseThing\nend\n\nservice = Container.resolve SecretService, \"primary\"\ndb = Container.resolve DatabaseThing\n```\n\n### Runtime Interrogation üëÄ\nHardwire can tell you information about the registrations at runtime, but the dependencies are _HardWired_ (See what I did there?), so they can't be changed.\n\n```crystal\nmodule Container\n  include HardWire::Container\n\n  singleton DbService\nend\n\nContainer.registered?(DbService) # true\nContainer.registered?(DbService, \"tagged\") # false\nContainer.registered?(String) # false\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/jerometwell/hardwire/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jerome Twell](https://github.com/jerometwell) - creator and maintainer\n","program":{"html_id":"hardwire/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"hardwire","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"hardwire/HardWire","path":"HardWire.html","kind":"module","full_name":"HardWire","name":"HardWire","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hardwire.cr","line_number":2,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L2"}],"repository_name":"hardwire","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A Compile-time non-intrusive dependency injection system for Crystal.","summary":"<p>A Compile-time non-intrusive dependency injection system for Crystal.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"hardwire/HardWire/Container","path":"HardWire/Container.html","kind":"module","full_name":"HardWire::Container","name":"Container","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hardwire.cr","line_number":44,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L44"}],"repository_name":"hardwire","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"hardwire/HardWire/Root","kind":"module","full_name":"HardWire::Root","name":"Root"}],"namespace":{"html_id":"hardwire/HardWire","kind":"module","full_name":"HardWire","name":"HardWire"},"doc":"A module mixin for creating a hardwire container.\n\nNo functionality-based documentation will appear here, since the module is designed to be included\nin other modules. See `HardWire::Root` for container-level functionality.\n```\nmodule WhateverYouLikeContainer\n  include Hardwire::Container\nend\n```","summary":"<p>A module mixin for creating a hardwire container.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"hardwire/HardWire/Inject","path":"HardWire/Inject.html","kind":"annotation","full_name":"HardWire::Inject","name":"Inject","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hardwire.cr","line_number":32,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L32"}],"repository_name":"hardwire","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"hardwire/HardWire","kind":"module","full_name":"HardWire","name":"HardWire"},"doc":"Attach this annotation to a #initialize function in a multi-constructor class\nto indicate that it is to be used for dependency injection.\n\nThis annotation is not required when a class has one constructor only.\n```\ndef initialize\n  # wont be used\nend\n\n@[HardWire::Inject]\ndef initialize\n  # will be used\nend\n```","summary":"<p>Attach this annotation to a #initialize function in a multi-constructor class to indicate that it is to be used for dependency injection.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"hardwire/HardWire/Root","path":"HardWire/Root.html","kind":"module","full_name":"HardWire::Root","name":"Root","abstract":false,"superclass":null,"ancestors":[{"html_id":"hardwire/HardWire/Container","kind":"module","full_name":"HardWire::Container","name":"Container"}],"locations":[{"filename":"src/hardwire.cr","line_number":206,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L206"}],"repository_name":"hardwire","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"REGISTRATIONS","name":"REGISTRATIONS","value":"[] of Tuple(String, String)","doc":"Store all registrations, which are mainly used to give nice errors for duplicate registrations\n\nUsers can also run their own checks at runtime for length, structure, etc.","summary":"<p>Store all registrations, which are mainly used to give nice errors for duplicate registrations</p>"}],"included_modules":[{"html_id":"hardwire/HardWire/Container","kind":"module","full_name":"HardWire::Container","name":"Container"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"hardwire/HardWire","kind":"module","full_name":"HardWire","name":"HardWire"},"doc":"A pre-made Container, designed to provide a concrete in-namespace module to generate documentation from.\n\nNOTE: All of the methods in this library are designed to operate _inside_ the container class,\nso you cannot use this container for actual dependency injection","summary":"<p>A pre-made Container, designed to provide a concrete in-namespace module to generate documentation from.</p>","class_methods":[{"id":"registered?(target:Class,tag=&quot;default&quot;):Bool-class-method","html_id":"registered?(target:Class,tag=&quot;default&quot;):Bool-class-method","name":"registered?","doc":"Interrogate the container for a registration","summary":"<p>Interrogate the container for a registration</p>","abstract":false,"args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"Class"},{"name":"tag","doc":null,"default_value":"\"default\"","external_name":"tag","restriction":""}],"args_string":"(target : Class, tag = <span class=\"s\">&quot;default&quot;</span>) : Bool","args_html":"(target : Class, tag = <span class=\"s\">&quot;default&quot;</span>) : Bool","location":{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"},"def":{"name":"registered?","args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":"Class"},{"name":"tag","doc":null,"default_value":"\"default\"","external_name":"tag","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"return REGISTRATIONS.includes?({target.name, tag.strip.downcase})"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"resolve(target,tag=&quot;default&quot;)-macro","html_id":"resolve(target,tag=&amp;quot;default&amp;quot;)-macro","name":"resolve","doc":"Resolve a dependency from a class and a string tag\n\nThis macro does the legwork of mangling the dynamic-looking call into the statically-defined `resolve!` method\n\nNOTE: This method does not protect you from unregistered dependencies, since it relies on\ndirectly resolving the `resolve!` method. If you need safety - use `registered?`","summary":"<p>Resolve a dependency from a class and a string tag</p>","abstract":false,"args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""},{"name":"tag","doc":null,"default_value":"\"default\"","external_name":"tag","restriction":""}],"args_string":"(target, tag = <span class=\"s\">&quot;default&quot;</span>)","location":{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"},"def":{"name":"resolve","args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""},{"name":"tag","doc":null,"default_value":"\"default\"","external_name":"tag","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"        HardWire::Root.resolve!(\n{{ target }}\n, HardWire::Root::Tags::\n{{ tag.upcase.id }}\n )\n      \n"}},{"id":"singleton(path,tags=nil,&block)-macro","html_id":"singleton(path,tags=nil,&amp;block)-macro","name":"singleton","doc":"Register a singleton dependency.","summary":"<p>Register a singleton dependency.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"tags","doc":null,"default_value":"nil","external_name":"tags","restriction":""}],"args_string":"(path, tags = <span class=\"n\">nil</span>, &block)","location":{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"},"def":{"name":"singleton","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"tags","doc":null,"default_value":"nil","external_name":"tags","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% if block %}\n          register {{ path }}, :singleton, {{ tags }} {{ block }}\n        {% else %}\n          register {{ path }}, :singleton, {{ tags }}\n        {% end %}\n\n      \n"}},{"id":"singleton(path,&block)-macro","html_id":"singleton(path,&amp;block)-macro","name":"singleton","doc":"Register a singleton dependency.","summary":"<p>Register a singleton dependency.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &block)","location":{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"},"def":{"name":"singleton","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"          singleton(\n{{ path }}\n) \n{{ block }}\n\n      \n"}},{"id":"transient(path,tags=nil,&block)-macro","html_id":"transient(path,tags=nil,&amp;block)-macro","name":"transient","doc":"Register a transient dependency.","summary":"<p>Register a transient dependency.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"tags","doc":null,"default_value":"nil","external_name":"tags","restriction":""}],"args_string":"(path, tags = <span class=\"n\">nil</span>, &block)","location":{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"},"def":{"name":"transient","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"tags","doc":null,"default_value":"nil","external_name":"tags","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        \n{% if block %}\n          register {{ path }}, :transient, {{ tags }} {{ block }}\n        {% else %}\n          register {{ path }}, :transient, {{ tags }}\n        {% end %}\n\n      \n"}},{"id":"transient(path,&block)-macro","html_id":"transient(path,&amp;block)-macro","name":"transient","doc":"Register a transient dependency.","summary":"<p>Register a transient dependency.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &block)","location":{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"},"def":{"name":"transient","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"        transient(\n{{ path }}\n) \n{{ block }}\n\n      \n"}}],"types":[{"html_id":"hardwire/HardWire/Root/Tags","path":"HardWire/Root/Tags.html","kind":"module","full_name":"HardWire::Root::Tags","name":"Tags","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hardwire.cr","line_number":207,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L207"}],"repository_name":"hardwire","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"hardwire/HardWire/Root","kind":"module","full_name":"HardWire::Root","name":"Root"},"doc":"The Tags module contains all registered tags as classes.\n\nThese generated tags allow us to resolve constructors using static type information.","summary":"<p>The Tags module contains all registered tags as classes.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"hardwire/HardWire/Tags","path":"HardWire/Tags.html","kind":"annotation","full_name":"HardWire::Tags","name":"Tags","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/hardwire.cr","line_number":15,"url":"https://github.com/jerometwell/hardwire/blob/28c75f18f20967daaf929a092dfdcf0092c733c8/src/hardwire.cr#L15"}],"repository_name":"hardwire","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"hardwire/HardWire","kind":"module","full_name":"HardWire","name":"HardWire"},"doc":"Attach this annotation to a #initialize function to indicate which tags this method needs to resolve\nfor each dependency.\n\nThis annotation takes a key-value set of arguments matching argument names to tags.\n```\n# resolve the db_service with tag \"secondary\"\n@[HardWire::Tags(db_service: \"secondary\")]\ndef initialize(db_service : DbService)\n```","summary":"<p>Attach this annotation to a #initialize function to indicate which tags this method needs to resolve for each dependency.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}})